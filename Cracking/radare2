Radare2

      General presentation

            Helpfull links : 
                  https://thanat0s.trollprod.org/2014/05/radare2-tuto-basic-premiere-approche/
                  https://www.youtube.com/watch?v=3NTXFUxcKPc
                  https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes/
                  
            Book : https://radare.gitbooks.io/radare2book
            
            1) Analyze the file description : 
            
            > radare2 myFile
             
             https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes/
             
             

            L’addresse d’une string, d’une fonction, d’une référence est un “Flag”. 
            Et vu que cela fait beaucoup d’objets, il sont rangés par “FlagSpaces”.  
            «fs» permet d’afficher ou de sélectionner le Flagspace dans lequel on travaille et «f» affiche les flags.

            On peut afficher les strings avec «ps» (Print String), et plus précisément «psz» pour une stringZ (Zero terminated).
            Si le code n’a pas été analysé, il n’y a pas de flagspace “fonctions”.



            [0x004004c0]> arf sym.imp.strcmp  // Donne moi les références. 
            Finding references of flags matching 'sym.imp.strcmp'...
            ar 0x004004a0 0x0040060f
            
            > s main : (seek) it will go to the "main" function

            [0x00400bc0]> pdf@0x0040060F  : (print disassemble function)

            [0x004004c0]> !rax2 -s 0x2173736170  | rev

            On peut utiliser «rax2» un autre tools de la suite RadaRE2 qui convertit tout en tout. 
            Et il est aussi possible de l’apeller directement depuis notre RadaRE2 avec un «!».

            Retenons, aa, pdf, psz, f, fs et arf. Cela sera déja très bien.

      Graphical Mode : 
            > VV
            The current graph is shown. The blue box indicate the current function
            
            > p : cycle across different representations
            
            > V! : fancy debugger mode

      Debug Mode : 
      
            Launch the program in debug mode : 
               > r2 -d myprog.bin
               > aaa
               > s sym.main
               > pdf
               > db 0x00415151 : place a breakpoint at the given adress
               > VV (optional : visual mode in ddebug) "rip" is a register of the current instruction pointer, it's the green arrow of visual 
               :> dc : debug continue 
               :> s : step by step instruction into functions (F11) / S : step by step (F10)
               :> dr : display registers content
               >dr rip=0x1515111321 : set the "rip" (or current pointer) to the adress we want, in order to force the jump at a particular loccation
               
           > ood
              
